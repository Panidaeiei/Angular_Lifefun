
// import { Injectable, inject, OnInit } from '@angular/core';
// import { HttpClient } from '@angular/common/http';
// import { Messaging, getToken, onMessage } from '@angular/fire/messaging';
// import { environment } from '../environments/environment';

// @Injectable({ providedIn: 'root' })
// export class NotificationService implements OnInit {
//   private messaging = inject(Messaging);
//   private http = inject(HttpClient);

//   ngOnInit() {
//     // Initialize messaging service
//     console.log('‚úÖ NotificationService initialized');
//   }

//   async init(userId: number) {
//     try {
//       // 0) ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠ Notification Permission ‡∏Å‡πà‡∏≠‡∏ô
//       const permission = await this.requestNotificationPermission();
//       if (permission !== 'granted') {
//         console.log('‚ùå Notification permission ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï:', permission);
//         return;
//       }

//       // 1) ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Firebase config ‡∏Å‡πà‡∏≠‡∏ô
//       if (!this.validateFirebaseConfig()) {
//         console.error('‚ùå Firebase config ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
//         return;
//       }

//       // 2) ‡∏Ç‡∏≠ token ‡∏î‡πâ‡∏ß‡∏¢ VAPID key (‡πÄ‡∏≠‡∏≤‡∏°‡∏≤‡πÉ‡∏™‡πà‡πÉ‡∏ô environment.vapidKey)
//       const token = await getToken(this.messaging, { vapidKey: environment.vapidKey });
//       if (!token) {
//         console.log('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠ FCM token ‡πÑ‡∏î‡πâ');
//         return;
//       }

//       console.log('‚úÖ ‡πÑ‡∏î‡πâ FCM token:', token);

//       // 3) ‡∏™‡πà‡∏á token ‡πÑ‡∏õ‡πÄ‡∏Å‡πá‡∏ö‡∏ó‡∏µ‡πà backend (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î DB ‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô token ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)
//       try {
//         await this.http.post(`${environment.apiBaseUrl}/register-fcm-token`, {
//           userId,
//           fcmToken: token,
//         }).toPromise();
//         console.log('‚úÖ ‡∏™‡πà‡∏á FCM token ‡πÑ‡∏õ backend ‡πÅ‡∏•‡πâ‡∏ß');
//       } catch (backendError: any) {
//         if (backendError.status === 404) {
//           console.warn('‚ö†Ô∏è Backend endpoint ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà - ‡πÄ‡∏Å‡πá‡∏ö token ‡πÉ‡∏ô localStorage ‡πÅ‡∏ó‡∏ô');
//           this.saveTokenLocally(userId, token);
//         } else {
//           throw backendError;
//         }
//       }

//       // 4) ‡∏ü‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÇ‡∏ü‡∏Å‡∏±‡∏™ (foreground)
//       onMessage(this.messaging, (payload) => {
//         console.log('üì© FCM foreground:', payload);
//         this.showNotification(payload);
//       });

//     } catch (error) {
//       console.error('‚ùå Error ‡πÉ‡∏ô NotificationService.init:', error);
//       this.handleFirebaseError(error);
//     }
//   }

//   // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Firebase config
//   private validateFirebaseConfig(): boolean {
//     try {
//       const config = environment.firebase;
//       if (!config.apiKey || !config.authDomain || !config.projectId) {
//         console.error('‚ùå Firebase config ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
//         return false;
//       }
      
//       // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö VAPID key
//       if (!environment.vapidKey) {
//         console.error('‚ùå VAPID key ‡πÑ‡∏°‡πà‡∏û‡∏ö');
//         return false;
//       }

//       console.log('‚úÖ Firebase config ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
//       return true;
//     } catch (error) {
//       console.error('‚ùå Error ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Firebase config:', error);
//       return false;
//     }
//   }

//   // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Firebase error
//   private handleFirebaseError(error: any): void {
//     if (error.code === 'installations/request-failed') {
//       console.error('‚ùå Firebase Installation failed - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key ‡πÅ‡∏•‡∏∞ Project ID');
//       console.error('üí° ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:');
//       console.error('1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Firebase Console ‚Üí Project Settings');
//       console.error('2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Web API Key ‡∏ß‡πà‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö environment.ts');
//       console.error('3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Project ID ‡∏ß‡πà‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô');
//       console.error('4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Cloud Messaging ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß');
//     } else if (error.code === 'messaging/permission-blocked') {
//       console.error('‚ùå Notification permission ‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å');
//     } else {
//       console.error('‚ùå Firebase error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ:', error);
//     }
//   }

//   // ‡∏Ç‡∏≠ Notification Permission
//   private async requestNotificationPermission(): Promise<NotificationPermission> {
//     // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ browser ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö notifications ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
//     if (!('Notification' in window)) {
//       console.log('‚ùå Browser ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö notifications');
//       this.showPermissionError('Browser ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö notifications');
//       return 'denied';
//     }

//     // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö permission ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
//     if (Notification.permission === 'granted') {
//       console.log('‚úÖ Notification permission ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß');
//       return 'granted';
//     }

//     if (Notification.permission === 'denied') {
//       console.log('‚ùå Notification permission ‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò');
//       this.showPermissionError('Notification permission ‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏ô browser settings');
//       return 'denied';
//     }

//     // ‡∏Ç‡∏≠ permission ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏Ç‡∏≠
//     try {
//       console.log('üì± ‡∏Ç‡∏≠ notification permission...');
//       const permission = await Notification.requestPermission();
//       console.log('üì± Notification permission result:', permission);
      
//       if (permission === 'denied') {
//         this.showPermissionError('Notification permission ‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô');
//       }
      
//       return permission;
//     } catch (error) {
//       console.error('‚ùå Error ‡∏Ç‡∏≠ notification permission:', error);
//       this.showPermissionError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠ notification permission');
//       return 'denied';
//     }
//   }

//   // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
//   private showPermissionError(message: string): void {
//     // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Edge browser ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
//     const isEdge = navigator.userAgent.includes('Edg');
    
//     let instructions = '';
//     if (isEdge) {
//       instructions = `‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏ô Edge Browser:\n1. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô "..." (‡πÄ‡∏°‡∏ô‡∏π) ‡∏°‡∏∏‡∏°‡∏Ç‡∏ß‡∏≤‡∏ö‡∏ô\n2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "Settings"\n3. ‡∏Ñ‡∏•‡∏¥‡∏Å "Cookies and site permissions"\n4. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ "Notifications"\n5. ‡∏Ñ‡∏•‡∏¥‡∏Å "Notifications"\n6. ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å "Block" ‡πÄ‡∏õ‡πá‡∏ô "Allow" ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ô‡∏µ‡πâ`;
//     } else {
//       instructions = `‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:\n1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà browser settings\n2. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ "Notifications"\n3. ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ô‡∏µ‡πâ`;
//     }
    
//     // ‡πÅ‡∏™‡∏î‡∏á alert ‡∏´‡∏£‡∏∑‡∏≠ toast ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏£‡∏≤‡∏ö
//     alert(`üîî ${message}\n\n${instructions}`);
    
//     // ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ console.log ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö developer
//     console.log('üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:', message);
//     console.log('üìã Instructions:', instructions);
//   }

//   // ‡πÄ‡∏Å‡πá‡∏ö token ‡πÉ‡∏ô localStorage (fallback)
//   private saveTokenLocally(userId: number, token: string): void {
//     try {
//       const tokenData = {
//         userId,
//         fcmToken: token,
//         timestamp: new Date().toISOString()
//       };
//       localStorage.setItem('fcmToken', JSON.stringify(tokenData));
//       console.log('‚úÖ ‡πÄ‡∏Å‡πá‡∏ö FCM token ‡πÉ‡∏ô localStorage ‡πÅ‡∏•‡πâ‡∏ß');
//     } catch (error) {
//       console.error('‚ùå Error ‡πÄ‡∏Å‡πá‡∏ö token ‡πÉ‡∏ô localStorage:', error);
//     }
//   }

//   // ‡πÅ‡∏™‡∏î‡∏á notification (foreground)
//   private showNotification(payload: any): void {
//     if ('serviceWorker' in navigator && 'Notification' in window) {
//       const title = payload.notification?.title || '‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà';
//       const options = {
//         body: payload.notification?.body || '‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà',
//         tag: 'notification'
//       };

//       // ‡πÅ‡∏™‡∏î‡∏á notification ‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô foreground
//       new Notification(title, options);
//     }
//   }
// }