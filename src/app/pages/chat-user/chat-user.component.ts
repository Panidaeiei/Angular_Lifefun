import { CommonModule } from '@angular/common';
import { Component, Input, HostListener, OnInit, OnDestroy } from '@angular/core';
import { MatButtonModule } from '@angular/material/button';
import { MatCardModule } from '@angular/material/card';
import { MatIconModule } from '@angular/material/icon';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { ActivatedRoute, RouterModule, Params, Router } from '@angular/router';
import { MatBadgeModule } from '@angular/material/badge';
import { FormsModule } from '@angular/forms';
import { UserService } from '../../services/Userservice';
import { ChatService } from '../../services/chat.service';

@Component({
  selector: 'app-chat-user',
  standalone: true,
  imports: [MatToolbarModule, MatButtonModule, RouterModule, MatCardModule, MatIconModule, CommonModule, MatBadgeModule,
    MatTabsModule, FormsModule],
  templateUrl: './chat-user.component.html',
  styleUrl: './chat-user.component.scss'
})
export class ChatUserComponent implements OnInit, OnDestroy {
  [x: string]: any;
  userId: string = '';
  newMessage: string = '';
  searchQuery: string = '';
  isDrawerOpen: boolean = false;
  selectedCard: any = null; 
  openedMenuId: string | null = null;
  isNotiDrawerOpen = true;

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö interval ID
  private chatRefreshInterval: any;
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏ã‡πâ‡∏≥
  private userProfileCache: Map<string, any> = new Map();
  private fetchingUsers: Set<string> = new Set(); // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏ã‡πâ‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
  private deletedUsers: Set<string> = new Set(); // ‡πÄ‡∏Å‡πá‡∏ö user IDs ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÅ‡∏•‡πâ‡∏ß

  isMobile = false;
  isIPad = false;
  showSidebar = true;
  showUserInfo = true;
  originalChatList: any[] = [];
  chatList: any[] = [];
  selectedChat: any = null;
  isDrawerOpenMobile: boolean = false;
  chatId: string = '';
  fromId: string = '';
  currentChatMessages: any[] = [];
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  chatImage: File | null = null;
  chatVideo: File | null = null;
  selectedFilePreview: string | null = null;

  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö hover bubble
  hoveredMsgIndex: number | null = null;

  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ã‡πâ‡∏≥
  isSending: boolean = false;

  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ scroll
  isUserScrolling: boolean = false;
  isNearBottom: boolean = true;

  @Input() userData: any;

  constructor(private route: ActivatedRoute, private userService: UserService, private chatService: ChatService, private router: Router) {}

  ngOnInit() {
    const loggedInUserId = localStorage.getItem('userId') || sessionStorage.getItem('userId');
    const token = localStorage.getItem('token') || sessionStorage.getItem('token');
    if (!loggedInUserId || !token) {
      this.router.navigate(['/login'], { queryParams: { error: 'unauthorized' } });
      return;
    }
    this.route.queryParams.subscribe((params: Params) => {
      this.userId = String(params['id']);
      this.fromId = this.userId;
      
      if (this.userId) {
        this.loadUserChats();
        // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ä‡∏ó‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç other_user ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
        this.chatService.refreshChatUserData(this.userId);
      }
    });
    
    this.checkScreenSize();
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÅ‡∏ä‡∏ó‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏™‡∏°‡∏≠
    setTimeout(() => {
      this.scrollToBottom();
    }, 100);

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÅ‡∏ä‡∏ó‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API)
    this.chatRefreshInterval = setInterval(() => {
      if (this.userId) {
        this.loadUserChats();
      }
    }, 60000);
  }

  ngOnDestroy() {
    // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÅ‡∏ä‡∏ó‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    if (this.chatRefreshInterval) {
      clearInterval(this.chatRefreshInterval);
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ä‡∏ó‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  private async processChatsWithUserProfiles(validChats: any[]): Promise<any[]> {
    // ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏° user IDs ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const userIdsToFetch = new Set<string>();
    
    validChats.forEach(chat => {
      const otherUserId = chat.other_user || chat.other_user_id || chat.uid || chat.other_id || chat.user_id || chat.id;
      let targetUserId = otherUserId;
      
      if (!targetUserId && chat.chatId) {
        const chatIdParts = chat.chatId.split('_');
        if (chatIdParts.length === 2) {
          targetUserId = chatIdParts[1] === this.userId ? chatIdParts[0] : chatIdParts[1];
        }
      }
      
      console.log('üîç Chat:', chat.chatId, 'Target User ID:', targetUserId, 'Username:', chat.other_username || chat.username);
      
      if (targetUserId && targetUserId !== this.userId && !this.userProfileCache.has(targetUserId)) {
        userIdsToFetch.add(targetUserId);
      }
    });
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    if (userIdsToFetch.size > 0) {
      const userIdsArray = Array.from(userIdsToFetch);
      console.log('üì§ Sending user IDs to API:', userIdsArray);
      try {
        // ‡πÉ‡∏ä‡πâ batch API ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ó‡∏µ‡∏•‡∏∞‡∏Ñ‡∏ô
        const userProfiles = await this.userService.getUsersBatch(userIdsArray).toPromise();
        
        if (userProfiles) {
          console.log('üìã All user profiles received:', userProfiles);
          
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö User IDs ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤ (‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
          const receivedUserIds = userProfiles.map(p => (p as any).uid?.toString()).filter(Boolean);
          const missingUserIds = userIdsArray.filter(id => !receivedUserIds.includes(id));
          
          if (missingUserIds.length > 0) {
            console.log('‚ùå Users not found in database (deleted):', missingUserIds);
            missingUserIds.forEach(userId => {
              this.deletedUsers.add(userId);
            });
          }
          
          // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á cache ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
          userProfiles.forEach(userProfile => {
            if (userProfile && (userProfile as any).uid) {
              const userId = (userProfile as any).uid.toString();
              this.userProfileCache.set(userId, userProfile);
              
              // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
              const accountStatus = (userProfile as any).account_status;
              console.log('üîç User ID:', userId, 'Account Status:', accountStatus);
              
              if (accountStatus === 'banned' || accountStatus === 'inactive') {
                this.deletedUsers.add(userId);
                console.log('‚ùå User added to deleted list:', userId);
              } else {
                this.deletedUsers.delete(userId);
                console.log('‚úÖ User is active:', userId);
              }
            }
          });
          
          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Firebase ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤
          userProfiles.forEach((userProfile) => {
            if (userProfile && (userProfile as any).uid) {
              const userId = (userProfile as any).uid.toString();
              const chat = validChats.find(c => {
                const otherUserId = c.other_user || c.other_user_id || c.uid || c.other_id || c.user_id || c.id;
                let targetUserId = otherUserId;
                if (!targetUserId && c.chatId) {
                  const chatIdParts = c.chatId.split('_');
                  if (chatIdParts.length === 2) {
                    targetUserId = chatIdParts[1] === this.userId ? chatIdParts[0] : chatIdParts[1];
                  }
                }
                return targetUserId === userId;
              });
              
              if (chat) {
                this.chatService.updateChatUserInfo(chat.chatId, this.userId, {
                  username: userProfile.username || '',
                  image_url: userProfile.image_url || ''
                });
              }
            }
          });
        }
      } catch (error) {
        console.error('Error fetching user profiles:', error);
      }
    }
    
    // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ä‡∏ó‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß
    const processedChats = validChats.map((chat) => {
      const otherUserId = chat.other_user || chat.other_user_id || chat.uid || chat.other_id || chat.user_id || chat.id;
      
      let username = chat.other_username || chat.username;
      let avatar = chat.other_image_url || chat.image_url;
      let targetUserId = otherUserId;
      
      if (!username || !avatar) {
        if (!targetUserId && chat.chatId) {
          const chatIdParts = chat.chatId.split('_');
          if (chatIdParts.length === 2) {
            targetUserId = chatIdParts[1] === this.userId ? chatIdParts[0] : chatIdParts[1];
          }
        }
        
      if (targetUserId && targetUserId !== this.userId) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
        if (this.deletedUsers.has(targetUserId)) {
          username = '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô';
          avatar = 'https://i.pinimg.com/736x/a8/0e/36/a80e3690318c08114011145fdcfa3ddb.jpg';
          console.log('‚ùå User marked as deleted:', targetUserId);
        } else {
          const userProfile = this.userProfileCache.get(targetUserId);
          if (userProfile) {
            username = userProfile.username || `User_${targetUserId}`;
            avatar = userProfile.image_url || 'https://i.pinimg.com/736x/a8/0e/36/a80e3690318c08114011145fdcfa3ddb.jpg';
          } else {
            username = username || `User_${targetUserId}`;
            avatar = avatar || 'https://i.pinimg.com/736x/a8/0e/36/a80e3690318c08114011145fdcfa3ddb.jpg';
          }
        }
      } else {
        username = username || `User_${chat.chatId}`;
        avatar = avatar || 'https://i.pinimg.com/736x/a8/0e/36/a80e3690318c08114011145fdcfa3ddb.jpg';
      }
      }
      
      const mapped = {
        avatar: avatar,
        name: username,
        lastMessage: chat.last_message || '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°',
        chatId: chat.chatId,
        lastMessageTime: chat.last_message_time || new Date().toISOString(),
        lastMessageSenderId: String(chat.last_message_sender_id || ''),
        lastMessageSenderName: chat.last_message_sender_name || username,
        uid: otherUserId || chat.chatId,
        isDeleted: this.deletedUsers.has(targetUserId || ''),
        ...chat
      };
      
      if (mapped.lastMessageSenderId === this.userId) {
        mapped.lastMessageSenderName = '‡∏Ñ‡∏∏‡∏ì';
      } else if (mapped.lastMessageSenderId === otherUserId) {
        mapped.lastMessageSenderName = username;
      } else if (mapped.lastMessageSenderId && mapped.lastMessageSenderId !== this.userId) {
        mapped.lastMessageSenderName = username;
      }
      
      return mapped;
    });
    
    return processedChats;
  }

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö‡∏°‡∏µ cache
  private async fetchUserProfileWithCache(userId: string): Promise<any> {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cache ‡∏Å‡πà‡∏≠‡∏ô
    if (this.userProfileCache.has(userId)) {
      return this.userProfileCache.get(userId);
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (this.fetchingUsers.has(userId)) {
      // ‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏î‡∏∂‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à
      return new Promise((resolve) => {
        const checkCache = () => {
          if (this.userProfileCache.has(userId)) {
            resolve(this.userProfileCache.get(userId));
          } else {
            setTimeout(checkCache, 100);
          }
        };
        checkCache();
      });
    }
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° userId ‡πÄ‡∏Ç‡πâ‡∏≤ fetchingUsers ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ã‡πâ‡∏≥
    this.fetchingUsers.add(userId);
    
    try {
      return new Promise((resolve, reject) => {
        this.userService.getUserById(userId).subscribe({
          next: (userProfile: any) => {
            if (userProfile) {
              // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á cache
              this.userProfileCache.set(userId, userProfile);
            }
            this.fetchingUsers.delete(userId);
            resolve(userProfile);
          },
          error: (error: any) => {
            this.fetchingUsers.delete(userId);
            reject(error);
          }
        });
      });
    } catch (error) {
      this.fetchingUsers.delete(userId);
      throw error;
    }
  }

loadUserChats() {
  // ‡πÉ‡∏ä‡πâ real-time listener ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  this.chatService.listenUserChats(this.userId, (chats) => {
    // console.log('üîç Current userId:', this.userId);
    // console.log('üìã All chats received:', chats);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÅ‡∏ä‡∏ó‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á user ‡∏ô‡∏µ‡πâ‡∏à‡∏£‡∏¥‡∏á‡πÜ
    const validChats = chats.filter(chat => {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ä‡∏ó‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const hasChatId = !!chat.chatId;
      const hasLastMessage = chat.last_message !== undefined;
      const hasLastMessageTime = chat.last_message_time !== undefined;
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ chatId ‡∏°‡∏µ userId ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const chatIdContainsUserId = chat.chatId && chat.chatId.includes(this.userId);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å last_message_sender_id ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
      const hasUserMessages = chat.last_message_sender_id === this.userId;
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏™‡πà‡∏á‡∏°‡∏≤‡∏´‡∏≤ user ‡∏ô‡∏µ‡πâ)
      const isUserReceiver = chat.last_message_sender_id && chat.last_message_sender_id !== this.userId;
      
      // console.log('üîç Chat ID:', chat.chatId, 'Contains userId?', chatIdContainsUserId);
      // console.log('üîç Has user messages?', hasUserMessages);
      // console.log('üîç Is user receiver?', isUserReceiver);
      // console.log('üîç Last message sender ID:', chat.last_message_sender_id);
      
      // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ä‡∏ó‡∏ñ‡πâ‡∏≤‡∏°‡∏µ chatId ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ä‡∏ó‡∏Ç‡∏≠‡∏á user ‡∏ô‡∏µ‡πâ‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡πÅ‡∏•‡∏∞ (user ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó ‡∏´‡∏£‡∏∑‡∏≠ user ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°)
      return hasChatId && chatIdContainsUserId && (hasUserMessages || isUserReceiver);
    });
    
    
    // ‡πÄ‡∏Å‡πá‡∏ö chatId ‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡∏°‡πà
    const previousChatIds = this.chatList.map(chat => chat.chatId);

    // ‡πÉ‡∏ä‡πâ async/await ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô
    this.processChatsWithUserProfiles(validChats).then(processedChats => {
      this.chatList = processedChats;
      this.originalChatList = [...this.chatList];
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡∏°‡πà
      const newChatIds = this.chatList.map(chat => chat.chatId);
      const hasNewChats = newChatIds.some(chatId => !previousChatIds.includes(chatId));
      
      if (hasNewChats) {
        // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ Angular ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
        setTimeout(() => {
          this.chatList = [...this.chatList];
          this.originalChatList = [...this.chatList];
        }, 0);
      }
      
      // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ä‡∏ó‡πÅ‡∏£‡∏Å‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
      if (this.chatList.length > 0 && !this.selectedChat) {
        this.selectChat(this.chatList[0]);
      }
    });
  });
}

  async deleteChat(chatId: string) {
    if (!chatId) return;
    if (!confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏ô‡∏µ‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡∏ñ‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏î‡πâ‡∏ß‡∏¢')) return;
    await this.chatService.removeChatFromUser(this.userId, chatId);
    await this.chatService.deleteEntireChat(chatId); // <-- ‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó
    
    if (this.selectedChat && this.selectedChat.chatId === chatId) {
      this.selectedChat = null;
      this.currentChatMessages = [];
    }
  }
 
  toggleChatMenu(chatId: string) {
    if (this.openedMenuId === chatId) {
      this.openedMenuId = null;
    } else {
      this.openedMenuId = chatId;
    }
  }

  @HostListener('document:click', ['$event'])
  onDocumentClick(event: MouseEvent) {
    // ‡∏õ‡∏¥‡∏î‡πÄ‡∏°‡∏ô‡∏π‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ô‡∏≠‡∏Å‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π
    const target = event.target as HTMLElement;
    if (!target.closest('.chat-menu-wrapper')) {
      this.openedMenuId = null;
    }
  }

  selectChat(chat: any) {
    this.selectedChat = chat;
    this.chatId = chat.chatId;
    
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï scroll state
    this.isNearBottom = true;
    this.isUserScrolling = false;
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å Firebase ‡πÅ‡∏ö‡∏ö real-time
    this.chatService.listenMessages(chat.chatId, (messages) => {
      const previousLength = this.currentChatMessages.length;
      this.currentChatMessages = messages;
      
      if (previousLength === 0) {
        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏•‡∏¢
        setTimeout(() => {
          const chatMessages = document.querySelector('.chat-messages');
          if (chatMessages) {
            // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏•‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            chatMessages.scrollTop = chatMessages.scrollHeight;
            this.isNearBottom = true;
            this.isUserScrolling = false;
          }
        }, 100);
      } else if (messages.length > previousLength && this.isNearBottom && !this.isUserScrolling) {
        // ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á - ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        setTimeout(() => {
          this.scrollToBottomForNewMessage();
        }, 100);
      }
    });
    
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö mobile ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÉ‡∏´‡πâ‡∏ã‡πà‡∏≠‡∏ô sidebar
    if (this.isMobile) {
      this.showSidebar = false;
    }
  }

  async sendMessage() {
    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ã‡πâ‡∏≥
    if (this.isSending) {
      return;
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÅ‡∏ä‡∏ó‡∏î‡πâ‡∏ß‡∏¢
    if (this.selectedChat && this.selectedChat.isDeleted) {
      alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏π‡∏Å‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
      return;
    }
    
    if ((!this.newMessage.trim() && !this.chatImage && !this.chatVideo) || !this.chatId) return;
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á
    this.isSending = true;
    
    let pendingMsg: any = null;
    if (this.chatImage) {
      pendingMsg = {
        uid: this.userId,
        text: this.newMessage,
        image_url: this.selectedFilePreview,
        type: 2,
        create_at: Date.now(),
        pending: true
      };
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° pending message ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      this.currentChatMessages.push(pendingMsg);
    } else if (this.chatVideo) {
      pendingMsg = {
        uid: this.userId,
        text: this.newMessage,
        video_url: this.selectedFilePreview,
        type: 3,
        create_at: Date.now(),
        pending: true
      };
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° pending message ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      this.currentChatMessages.push(pendingMsg);
    }
    
    try {
      let imageUrl = '';
      let videoUrl = '';
      
      // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
      if (this.chatImage) {
        imageUrl = await this.chatService.uploadImage(this.chatImage, this.chatId, this.userId);
      }
      if (this.chatVideo) {
        videoUrl = await this.chatService.uploadVideo(this.chatVideo, this.chatId, this.userId);
      }
      
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÑ‡∏ü‡∏•‡πå
      await this.chatService.sendMessage(
        this.chatId,
        this.userId,
        this.newMessage,
        imageUrl,
        videoUrl,
        this.userData?.username || ''
      );
      
      // ‡∏•‡∏ö pending message ‡∏≠‡∏≠‡∏Å (‡πÄ‡∏û‡∏£‡∏≤‡∏∞ Firebase ‡∏à‡∏∞‡∏™‡πà‡∏á message ‡∏à‡∏£‡∏¥‡∏á‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß)
      if (pendingMsg) {
        const index = this.currentChatMessages.findIndex(msg => msg.pending && msg.create_at === pendingMsg.create_at);
        if (index !== -1) {
          this.currentChatMessages.splice(index, 1);
        }
      }
      
      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
      this.newMessage = '';
      this.chatImage = null;
      this.chatVideo = null;
      this.selectedFilePreview = null;
      
      // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
      setTimeout(() => {
        this.scrollToBottomForNewMessage();
      }, 100);
    } catch (error) {
      console.error('Error sending message:', error);
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î error ‡πÉ‡∏´‡πâ‡∏•‡∏ö pending message ‡∏≠‡∏≠‡∏Å
      if (pendingMsg) {
        const index = this.currentChatMessages.findIndex(msg => msg.pending && msg.create_at === pendingMsg.create_at);
        if (index !== -1) {
          this.currentChatMessages.splice(index, 1);
        }
      }
    } finally {
      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÄ‡∏™‡∏°‡∏≠
      this.isSending = false;
    }
  }

  onChatFileSelected(event: any) {
    const file: File = event.target.files[0];
    if (!file) return;

    // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤
    this.chatImage = null;
    this.chatVideo = null;
    this.selectedFilePreview = null;

    if (file.type.startsWith('image/')) {
      this.chatImage = file;
      this.createFilePreview(file);
    } else if (file.type.startsWith('video/')) {
      this.chatVideo = file;
      this.createFilePreview(file);
    }
  }

  createFilePreview(file: File) {
    const reader = new FileReader();
    reader.onload = (e: any) => {
      this.selectedFilePreview = e.target.result;
    };
    reader.readAsDataURL(file);
  }

  removeSelectedFile() {
    this.chatImage = null;
    this.chatVideo = null;
    this.selectedFilePreview = null;
  }

  getFileSize(): string {
    const file = this.chatImage || this.chatVideo;
    if (file && file.size) {
      return (file.size / 1024 / 1024).toFixed(2) + ' MB';
    }
    return '0 MB';
  }

  @HostListener('window:resize')
  onResize() {
    this.checkScreenSize();
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï scroll position ‡πÄ‡∏°‡∏∑‡πà‡∏≠ orientation ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
    setTimeout(() => {
      this.scrollToBottom();
    }, 300);
  }

  @HostListener('window:orientationchange')
  onOrientationChange() {
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ orientation ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏õ‡∏£‡∏±‡∏ö layout
    setTimeout(() => {
      this.checkScreenSize();
      this.scrollToBottom();
    }, 500);
  }

checkScreenSize() {
  const w = window.innerWidth;
  const h = window.innerHeight;
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô iPad ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  this.isIPad = /iPad/.test(navigator.userAgent) || 
                 (w >= 768 && w <= 1230) || 
                 (w >= 1024 && w <= 1366 && h <= 1024);
  
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ mobile ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‚â§ 600px)
  this.isMobile = w <= 600;
  
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á UI ‡∏ï‡∏≤‡∏°‡πÇ‡∏´‡∏°‡∏î
  if (this.isMobile) {
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    this.showSidebar = false;
    this.showUserInfo = false;
  } else if (this.isIPad) {
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö iPad ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ UI ‡πÅ‡∏ö‡∏ö‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠ (‡∏ã‡πà‡∏≠‡∏ô sidebar)
    this.showSidebar = false;
    this.showUserInfo = false;
  } else {
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö desktop
    this.showSidebar = true;
    this.showUserInfo = true;
  }
}

  toggleDrawer(): void {
    this.isDrawerOpen = !this.isDrawerOpen;
  }

  selectCard(cardData: any) {
    this.selectedCard = cardData;
    this.isNotiDrawerOpen = false;
  }

  searchChats() {
    if (!this.searchQuery.trim()) {
      this.chatList = [...this.originalChatList];
    } else {
      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÅ‡∏ä‡∏ó
      this.chatList = this.originalChatList.filter(chat => 
        chat.name.toLowerCase().includes(this.searchQuery.toLowerCase()) ||
        (chat.lastMessage && chat.lastMessage.toLowerCase().includes(this.searchQuery.toLowerCase()))
      );
    }
  }

  onMobileChatSelect(chat: any) {
    this.selectedChat = chat;
  }

  openMobileDrawer() {
    this.isDrawerOpenMobile = true;
  }

  closeMobileDrawer() {
    this.isDrawerOpenMobile = false;
  }

  scrollToBottom() {
    const chatMessages = document.querySelector('.chat-messages');
    if (chatMessages) {
      // ‡πÉ‡∏ä‡πâ requestAnimationFrame ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ DOM ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
      requestAnimationFrame(() => {
        chatMessages.scrollTop = chatMessages.scrollHeight;
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï scroll state
        this.isNearBottom = true;
        this.isUserScrolling = false;
      });
    }
  }

  // Method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
  scrollToBottomForNewMessage() {
    const chatMessages = document.querySelector('.chat-messages');
    if (chatMessages) {
      // ‡πÉ‡∏ä‡πâ requestAnimationFrame ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ DOM ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏™‡∏£‡πá‡∏à
      requestAnimationFrame(() => {
        chatMessages.scrollTop = chatMessages.scrollHeight;
        this.isNearBottom = true;
      });
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  checkIfNearBottom(): boolean {
    const chatMessages = document.querySelector('.chat-messages');
    if (chatMessages) {
      const { scrollTop, scrollHeight, clientHeight } = chatMessages;
      const threshold = 150; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö iPad
      return scrollHeight - scrollTop - clientHeight < threshold;
    }
    return true;
  }

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ scroll event
  onChatScroll() {
    this.isUserScrolling = true;
    this.isNearBottom = this.checkIfNearBottom();
    
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï flag ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏¢‡∏∏‡∏î scroll
    setTimeout(() => {
      this.isUserScrolling = false;
    }, 200); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏¢‡∏∏‡∏î scroll ‡πÅ‡∏•‡πâ‡∏ß
  }

  logout() {
    localStorage.removeItem('userId');
    localStorage.removeItem('token');
    localStorage.removeItem('userRole');
    localStorage.removeItem('currentUserId');
    sessionStorage.removeItem('userId');
    sessionStorage.removeItem('token');
    sessionStorage.removeItem('userRole');
    sessionStorage.removeItem('currentUserId');
    this.router.navigate(['/login']);
    // ‡∏•‡∏ö cache ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
    this.userProfileCache.clear();
    this.fetchingUsers.clear();
    this.deletedUsers.clear();
  }


}