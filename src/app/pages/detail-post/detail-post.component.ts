import { Component, ElementRef, OnInit, QueryList, ViewChild, ViewChildren, OnDestroy } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { MatToolbarModule } from '@angular/material/toolbar';
import { RouterModule } from '@angular/router';
import { CommonModule } from '@angular/common';
import { MatTabsModule } from '@angular/material/tabs';
import { MatCardModule } from '@angular/material/card';
import { MatButtonModule } from '@angular/material/button';
import { MatMenuModule, MatMenuTrigger } from '@angular/material/menu';
import { MatIconModule } from '@angular/material/icon';
import { PostService } from '../../services/Postservice';
import { UserService } from '../../services/Userservice';
import { DetailPost } from '../../models/detail_post';
import { ReactPostservice } from '../../services/ReactPostservice';
import { ShowPost } from '../../models/showpost_model';
import { NewlineToBrPipe } from '../../newline-to-br.pipe';
import { ConfirmDeleteDialogComponent } from '../../confirm-delete-dialog/confirm-delete-dialog.component';
import { MatDialog } from '@angular/material/dialog';
import { EditPostModel } from '../../models/edit-post.model';
import { FormsModule } from '@angular/forms'
import { TimeAgoPipe, FormatLocalTimePipe} from '../../pipes/time-ago.pipe';
import { SharePostModel } from '../../models/sharepost_model';
import { SavePostModel } from '../../models/savepost_service';
import { ReportDialogComponent } from '../report-dialog/report-dialog.component';
import { MatTooltipModule } from '@angular/material/tooltip';
import { NotificationService, NotificationCounts } from '../../services/notification.service';
import { Subscription } from 'rxjs';
import { filter } from 'rxjs/operators';

@Component({
  selector: 'app-detail-post',
  standalone: true,
  imports: [
    MatToolbarModule, RouterModule, CommonModule, MatTabsModule, MatCardModule, MatButtonModule, MatMenuModule, MatIconModule, NewlineToBrPipe, FormsModule, TimeAgoPipe, FormatLocalTimePipe, MatTooltipModule
  ],
  templateUrl: './detail-post.component.html',
  styleUrls: ['./detail-post.component.scss']
})
export class DetailPostComponent implements OnInit, OnDestroy {
  userId: string = '';
  commentOwnerId: string = '';
  postId: string = '';
  isLiked: boolean = false;
  isDrawerOpen: boolean = false; // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Drawer ‡∏õ‡∏¥‡∏î
  post: DetailPost | null = null; // ‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  currentMedia: { type: string; url: string } = { type: '', url: '' };
  currentMediaIndex: number = 0; // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏î‡∏π‡∏™‡∏∑‡πà‡∏≠
  controlsVisible: boolean = false;
  posts: ShowPost[] = []; // ‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  isEditing = false;
  title: string = '';
  postcom: any; // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤
  comments: any[] = []; // ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤
  isExpanded: boolean = false;
  shareCount: number = 0;
  isShared: boolean = false;
  isSave: boolean = false;
  saveCount: number = 0; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏û‡∏™‡∏ï‡πå
  currentUserId: string | null = null;
  viewerId: string = '';
  touchStartX = 0;
  touchEndX = 0;
  touchStartY = 0;
  touchEndY = 0;
  isMobile: boolean = false;
  notificationCounts: NotificationCounts = {
    like: 0,
    follow: 0,
    share: 0,
    comment: 0,
    unban: 0,
    total: 0
  };
  private notificationSubscription?: Subscription;

  @ViewChild('commentInput') commentInput!: ElementRef;
  @ViewChildren(MatMenuTrigger) menuTriggers!: QueryList<MatMenuTrigger>;


  constructor(private route: ActivatedRoute, private router: Router, private userService: UserService, private postService: PostService, private reactPostservice: ReactPostservice, public dialog: MatDialog, private notificationService: NotificationService) { }

  ngOnInit(): void {
    const loggedInUserId = localStorage.getItem('userId') || sessionStorage.getItem('userId');
    const token = localStorage.getItem('token') || sessionStorage.getItem('token');
    if (!loggedInUserId || !token) {
      this.router.navigate(['/login'], { queryParams: { error: 'unauthorized' } });
      return;
    }

    this.checkScreenSize();
    window.addEventListener('resize', this.onResize.bind(this));
    
    // ‡πÇ‡∏´‡∏•‡∏î currentUserId ‡∏à‡∏≤‡∏Å localStorage ‡∏Å‡πà‡∏≠‡∏ô
    this.userService.loadCurrentUserId();
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö snapshot ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
    const snapshotParams = this.route.snapshot.queryParams;
    if (snapshotParams['post_id']) {
      this.postId = snapshotParams['post_id'];
      this.fetchPost(this.postId);
      this.loadComments(Number(this.postId));
      this.loadShareStatus();
      this.loadSaveStatus();
    }
    
    if (snapshotParams['user_id']) {
      this.userId = snapshotParams['user_id'];
      this.startNotificationTracking();
    }
    
    // Subscribe ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ params ‡∏ó‡∏µ‡πà‡∏°‡∏µ post_id ‡πÅ‡∏•‡∏∞ user_id
    this.route.queryParams
      .pipe(filter((params: any) => !!params['post_id'] && !!params['user_id']))
      .subscribe((params: any) => {
        
        if (params['post_id']) {
          this.postId = params['post_id'];
          this.fetchPost(this.postId);
          this.loadComments(Number(this.postId));
          this.loadShareStatus();
          this.loadSaveStatus();
        }
        
        if (params['user_id']) {
          this.userId = params['user_id'];
          this.startNotificationTracking();
        }
      });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö userId ‡πÉ‡∏ô url ‡∏Å‡∏±‡∏ö userId ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
    this.userService.getCurrentUserId().subscribe((currentUserId: string | null) => {
      const urlUserId = this.route.snapshot.queryParams['user_id'];
      
      if (urlUserId && currentUserId && urlUserId !== currentUserId) {
        // ‡∏ñ‡πâ‡∏≤ id ‡πÉ‡∏ô url ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö id ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÑ‡∏ß‡πâ ‡πÉ‡∏´‡πâ redirect ‡∏≠‡∏≠‡∏Å
        this.router.navigate(['/login']);
        return;
      }
    });

    // ‡∏Å‡∏≤‡∏£ subscribe ‡∏Å‡∏±‡∏ö likeStatus$
    this.reactPostservice.likeStatus$.subscribe((status) => {
      // ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏•‡∏Ñ‡πå‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
    });

    // ‡∏î‡∏∂‡∏á currentUserId
    this.userService.getCurrentUserId().subscribe((userId) => {
      this.currentUserId = userId;
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö userId ‡πÉ‡∏ô url ‡∏Å‡∏±‡∏ö userId ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
      const urlUserId = this.route.snapshot.queryParams['user_id'];
      if (urlUserId && userId && urlUserId !== userId) {
        this.router.navigate(['/login']);
        return;
      }
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏•‡∏Ñ‡πå‡∏Ç‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå
    this.posts.forEach((post) => {
      this.checkLikeStatus(post.post_id);
    });

    // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå
    this.fetchComments();
  }

  ngOnDestroy(): void {
    window.removeEventListener('resize', this.onResize.bind(this));
    
    // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    this.notificationService.stopAutoUpdate();
    
    // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å subscription
    if (this.notificationSubscription) {
      this.notificationSubscription.unsubscribe();
    }
  }

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  private startNotificationTracking(): void {
    if (this.userId) {
      // ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
      this.notificationService.loadNotificationCounts(Number(this.userId));
      
      // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
      this.notificationService.startAutoUpdate(Number(this.userId));
      
      // ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
      this.notificationSubscription = this.notificationService.notificationCounts$.subscribe(
        (counts) => {
          this.notificationCounts = counts;
        }
      );
    }
  }

  checkScreenSize() {
    this.isMobile = window.innerWidth <= 900;
  }

  onResize() {
    this.checkScreenSize();
  }

  openReportDialog(postId: number): void {
    const dialogRef = this.dialog.open(ReportDialogComponent, {
      width: '400px',
      data: { pid: postId, uid: this.userId }
    });

    dialogRef.afterClosed().subscribe(result => {
      if (result === true) {
        alert('‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß');
      }
    });
  }

  openReportCommentDialog(cid: number) {
    const dialogRef = this.dialog.open(ReportDialogComponent, {
      width: '400px',
      data: { cid }
    });

    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        console.log('‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô:', result);
        // üîª ‡∏™‡πà‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÅ‡∏•‡∏∞ postId ‡πÑ‡∏õ backend ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
      }
    });
  }

  goToProfile(userId: string): void {
    if (String(userId) === String(this.userId)) {
      // ‡∏´‡∏≤‡∏Å userId ‡∏Ñ‡∏∑‡∏≠ currentUserId, ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (ProfileUser)
      this.router.navigate(['/ProfileUser'], { queryParams: { id: userId } });
    } else {
      // ‡∏´‡∏≤‡∏Å userId ‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô currentUserId, ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏π (view_user) ‡∏û‡∏£‡πâ‡∏≠‡∏° queryParams ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö viewerId
      this.router.navigate(['/view_user', this.currentUserId], { queryParams: { Profileuser: userId } });
    }
  }

  fetchComments(): void {
    const postId = Number(this.postId);

    if (isNaN(postId)) {
      console.error('Invalid postId for comments:', this.postId);
      return;
    }

    this.reactPostservice.getComments(postId).subscribe(
      (response) => {
        this.comments = response.comments || [];
      },
      (error) => {
        console.error('Error fetching comments:', error);
      }
    );
  }


  fetchPost(postId: string): void {
    const postIdNumber = Number(postId);  // ‡πÅ‡∏õ‡∏•‡∏á postId ‡∏à‡∏≤‡∏Å string ‡πÄ‡∏õ‡πá‡∏ô number

    if (isNaN(postIdNumber)) {
      console.error('Invalid postId:', postId);
      return; // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô number ‡πÑ‡∏î‡πâ
    }

    this.postService.getPostById(postIdNumber).subscribe(
      (response) => {
        this.post = response;
        this.title = this.post.title;  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ title ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        this.currentMediaIndex = 0;
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const totalMedia = (this.post.images?.length || 0) + (this.post.videos?.length || 0);
        
        this.updateCurrentMedia(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï media ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏û‡∏™‡∏ï‡πå
      },
      (error) => {
        console.error('Error fetching post details:', error);
      }
    );

  }

  loadShareStatus(): void {
    const data: SharePostModel = { post_id: Number(this.postId) };

    this.reactPostservice.getShareStatus(data).subscribe(
      (response) => {
        this.isShared = response.isShared; // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏£‡πå‡∏à‡∏≤‡∏Å response (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ localStorage
        if (response.share_count !== undefined) {
          this.shareCount = response.share_count;
          // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á localStorage ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô fallback
          const key = `share_count_${this.postId}`;
          localStorage.setItem(key, this.shareCount.toString());
        } else {
          // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å localStorage
          this.loadShareCountFromStorage();
        }
      },
      (error) => {
        console.error('Error loading post status:', error);
        // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å localStorage ‡πÄ‡∏°‡∏∑‡πà‡∏≠ API error
        this.loadShareCountFromStorage();
      }
    );
  }

  loadSaveStatus(): void {
    this.reactPostservice.getSaveStatus(Number(this.postId)).subscribe(
      (response) => {
        this.isSave = response.isSave;
        // ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏≤‡∏Å localStorage
        this.loadSaveCountFromStorage();
      },
      (error) => {
        console.error('Error loading save status:', error);
        // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å localStorage ‡πÄ‡∏°‡∏∑‡πà‡∏≠ API error
        this.loadSaveCountFromStorage();
      }
    );
  }

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô localStorage
  private updateSaveCount(increment: boolean): void {
    const key = `save_count_${this.postId}`;
    let currentCount = parseInt(localStorage.getItem(key) || '0');
    
    if (increment) {
      currentCount++;
    } else {
      currentCount = Math.max(0, currentCount - 1);
    }
    
    localStorage.setItem(key, currentCount.toString());
    this.saveCount = currentCount;
  }

  private loadSaveCountFromStorage(): void {
    const key = `save_count_${this.postId}`;
    this.saveCount = parseInt(localStorage.getItem(key) || '0');
  }

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏£‡πå‡πÉ‡∏ô localStorage
  private updateShareCount(increment: boolean): void {
    const key = `share_count_${this.postId}`;
    let currentCount = parseInt(localStorage.getItem(key) || '0');
    
    if (increment) {
      currentCount++;
    } else {
      currentCount = Math.max(0, currentCount - 1);
    }
    
    localStorage.setItem(key, currentCount.toString());
    this.shareCount = currentCount;
  }

  private loadShareCountFromStorage(): void {
    const key = `share_count_${this.postId}`;
    this.shareCount = parseInt(localStorage.getItem(key) || '0');
  }

  loadComments(postId: number): void {
    this.reactPostservice.getComments(postId).subscribe({
      next: (data) => {
        console.log('Response from API:', data); // Log ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
        this.comments = data.comments || []; // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ comments
      },
      error: (err) => {
        console.error('Error fetching comments:', err); // Log ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
      }
    });
  }

  encodeLocation(location: string): string {
    return encodeURIComponent(location);
  }
  updateCurrentMedia(): void {
    if (this.post) {
      const allMedia = [
        ...this.post?.images.map((url) => ({ type: 'image', url })),
        ...this.post?.videos.map((url) => ({ type: 'video', url }))
      ];
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ currentMediaIndex ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      if (this.currentMediaIndex >= 0 && this.currentMediaIndex < allMedia.length) {
      this.currentMedia = allMedia[this.currentMediaIndex];
      } else {
        console.error('Invalid media index:', this.currentMediaIndex, 'Total media:', allMedia.length);
        // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏£‡∏Å‡∏ñ‡πâ‡∏≤‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        if (allMedia.length > 0) {
          this.currentMediaIndex = 0;
          this.currentMedia = allMedia[0];
        }
      }
    }
  }

  nextMedia(): void {
    if (this.post && (this.post.images.length + this.post.videos.length) > 1) {  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö post ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢ media
      const totalMedia = this.post.images.length + this.post.videos.length;
      this.currentMediaIndex = (this.currentMediaIndex + 1) % totalMedia;
      this.updateCurrentMedia();
    }
  }

  prevMedia(): void {
    if (this.post && (this.post.images.length + this.post.videos.length) > 1) {  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö post ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢ media
      const totalMedia = this.post.images.length + this.post.videos.length;
      this.currentMediaIndex = (this.currentMediaIndex - 1 + totalMedia) % totalMedia;
      this.updateCurrentMedia();
    }
  }


  showControls(): void {
    this.controlsVisible = true;
  }

  hideControls(): void {
    this.controlsVisible = false;
  }
  toggleDrawer(): void {
    this.isDrawerOpen = !this.isDrawerOpen; // ‡∏™‡∏•‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î
  }


  toggleHeart(post: ShowPost): void {
    const userId = this.userId;  // ‡πÉ‡∏ä‡πâ userId ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å queryParams

    // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ isLiked
    post.isLiked = !post.isLiked;

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ LikePostService ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÑ‡∏•‡∏Ñ‡πå‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    this.reactPostservice.likePost(post.post_id, Number(userId)).subscribe(
      (response) => {
        post.likes_count = response.likes_count;  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏¢‡∏≠‡∏î‡πÑ‡∏•‡∏Ñ‡πå
      },
      (error) => {
        console.error('Error liking post:', error);
      }
    );
  }
  checkLikeStatus(postId: number): void {
    this.reactPostservice.checkLikeStatus(postId).subscribe(
      (response) => {
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏•‡∏Ñ‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ô‡∏µ‡πâ
        const post = this.posts.find(p => p.post_id === postId);
        if (post) {
          post.isLiked = response.liked;  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÑ‡∏•‡∏Ñ‡πå‡∏Ç‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå
        }
      },
      (error) => {
        console.error('Error checking like status:', error);
      }
    );
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  hasMultipleMedia(): boolean {
    const totalMediaCount = (this.post?.images?.length || 0) + (this.post?.videos?.length || 0);
    return totalMediaCount > 1; // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô
  }
  
  deletePost(postId: number): void {
    // ‡πÄ‡∏õ‡∏¥‡∏î dialog ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß
    const dialogRef = this.dialog.open(ConfirmDeleteDialogComponent, {
      enterAnimationDuration: '0ms',  // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î
      exitAnimationDuration: '0ms'   // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î
    });

    dialogRef.afterClosed().subscribe(result => {
      if (result) {  // ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
        this.postService.deletePost(postId).subscribe(
          (response) => {
            alert('‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
            this.router.navigate(['/HomepageUser'], { queryParams: { id: this.userId } });
          },
          (error) => {
            alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå');
            console.error(error);
          }
        );
      }
    });
  }

  editPost(): void {
    this.isEditing = true;  // ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  }


  cancelEdit(): void {
    this.isEditing = false;  // ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    this.title = this.post?.title || '';  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï title ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
  }

  saveEditedPost(): void {
    // ‡πÅ‡∏õ‡∏•‡∏á postId ‡πÄ‡∏õ‡πá‡∏ô number ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
    const postIdAsNumber = +this.postId;

    const editData: EditPostModel = {
      title: this.title,  // ‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ title ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    };

    this.postService.editPost(postIdAsNumber, editData).subscribe(
      (response) => {
        if (this.post) {
          // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á this.post ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
          this.post.title = this.title;
        } else {
          console.error('Post is null');
        }
        this.isEditing = false;
      },
      (error) => {
        alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏û‡∏™‡∏ï‡πå');
        console.error('Error editing post:', error);
      }
    );
  }

  sortCommentsByDate(): void {
    if (this.comments && this.comments.length > 1) {
      this.comments.sort(
        (a, b) => new Date(b.date_time).getTime() - new Date(a.date_time).getTime()
      );
    }
  }

  onSubmitComment(commentTitle: string): void {
    if (commentTitle.trim()) {
      const userId = localStorage.getItem('userId'); // ‡∏î‡∏∂‡∏á userId ‡∏à‡∏≤‡∏Å localStorage ‡∏´‡∏£‡∏∑‡∏≠ JWT token

      if (!userId) {
        alert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ');
        return; // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö userId ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
      }

      this.reactPostservice.addComment(Number(this.postId), commentTitle, Number(userId)).subscribe(
        (response) => {
          console.log('Comment added successfully:', response);

          this.fetchComments(); // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏´‡∏°‡πà
          this.commentInput.nativeElement.value = '';

        },
        (error) => {
          console.error('Error adding comment:', error);
        }
      );
    } else {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô');
    }
  }

  deleteComment(commentId: string): void {
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö
    const confirmDelete = window.confirm('‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏•‡∏ö‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ô‡∏µ‡πâ?');

    if (confirmDelete) {
      // ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î "‡∏ï‡∏Å‡∏•‡∏á"
      this.reactPostservice.deleteComment(commentId).subscribe(
        (response) => {
          console.log('‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
          this.sortCommentsByDate();
          this.fetchComments();  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà

        },
        (error) => {
          console.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÑ‡∏î‡πâ:', error);
        }
      );
    } else {
      console.log('‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å');
    }
  }

  showAllComments: boolean = false; // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÅ‡∏Ñ‡πà 4 ‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å

  toggleShowComments(): void {
    this.showAllComments = !this.showAllComments;
  }

  toggleSavePost(): void {
    const data: SavePostModel = { post_id: Number(this.postId) }; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö postId ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç

    this.reactPostservice.saveOrUnsavePost(data).subscribe(
      (response) => {
        this.isSave = response.isSave;
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏≤‡∏Å response (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ localStorage
        if (response.save_count !== undefined) {
          this.saveCount = response.save_count;
          // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á localStorage ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô fallback
          const key = `save_count_${this.postId}`;
          localStorage.setItem(key, this.saveCount.toString());
        } else {
          // ‡πÉ‡∏ä‡πâ localStorage ‡∏ñ‡πâ‡∏≤ API ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á save_count ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
          this.updateSaveCount(this.isSave);
        }
      },
      (error) => {
        console.error('Error saving/unsaving post:', error);
        alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£');
      }
    );
  }



  sharePost(): void {
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏£‡πå
    const confirmMessage = this.isShared
      ? '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏£‡πå‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?'
      : '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏£‡πå‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?';

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
    const userConfirmed = window.confirm(confirmMessage);

    if (userConfirmed) {
      const data: SharePostModel = {
        post_id: Number(this.postId),
      };

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏£‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏£‡πå
      this.reactPostservice.sharePost(data).subscribe(
        (response) => {
          if (response.message === 'Post shared successfully.') {
            this.isShared = true; // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡πÅ‡∏ä‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏£‡πå
            this.updateShareCount(true);
          } else if (response.message === 'Post unshared successfully.') {
            this.isShared = false;
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏£‡πå
            this.updateShareCount(false);
          }
        },
        (error) => {
          console.error('Error sharing/unsharing post:', error);
          alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£');
        }
      );
    }
  }

  onTouchStart(event: TouchEvent) {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!this.post || (this.post.images.length + this.post.videos.length) <= 1) {
      return;
    }
    
    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ï‡∏∞
    event.preventDefault();
    this.touchStartX = event.changedTouches[0].screenX;
    this.touchStartY = event.changedTouches[0].screenY;
  }
  
  onTouchMove(event: TouchEvent) {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!this.post || (this.post.images.length + this.post.videos.length) <= 1) {
      return;
    }
    
    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ô‡∏¥‡πâ‡∏ß
    event.preventDefault();
    this.touchEndX = event.changedTouches[0].screenX;
    this.touchEndY = event.changedTouches[0].screenY;
  }
  
  onTouchEnd(event: TouchEvent) {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!this.post || (this.post.images.length + this.post.videos.length) <= 1) {
      return;
    }
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô
    const deltaX = this.touchStartX - this.touchEndX;
    const deltaY = this.touchStartY - this.touchEndY;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á
    const isHorizontalSwipe = Math.abs(deltaX) > Math.abs(deltaY);
    
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 50px
    if (isHorizontalSwipe && Math.abs(deltaX) > 50) {
      if (deltaX > 0) {
        // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤ (‡∏£‡∏π‡∏õ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ)
        this.nextMedia();
      } else {
        // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢ (‡∏£‡∏π‡∏õ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤)
        this.prevMedia();
      }
    }
    
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤
    this.touchStartX = 0;
    this.touchEndX = 0;
    this.touchStartY = 0;
    this.touchEndY = 0;
  }

  logout() {
    localStorage.removeItem('userId');
    localStorage.removeItem('token');
    localStorage.removeItem('userRole');
    localStorage.removeItem('currentUserId');
    sessionStorage.removeItem('userId');
    sessionStorage.removeItem('token');
    sessionStorage.removeItem('userRole');
    sessionStorage.removeItem('currentUserId');
    this.router.navigate(['/login']);
  }

}